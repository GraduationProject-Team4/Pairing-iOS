// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/translate/v3beta1/translation_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DetectedLanguage;
@class GcsDestination;
@class GcsSource;
@class Glossary;
@class GlossaryInputConfig;
@class Glossary_LanguageCodePair;
@class Glossary_LanguageCodesSet;
@class InputConfig;
@class OutputConfig;
@class SupportedLanguage;
@class TranslateTextGlossaryConfig;
@class Translation;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum BatchTranslateMetadata_State

/** State of the job. */
typedef GPB_ENUM(BatchTranslateMetadata_State) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  BatchTranslateMetadata_State_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Invalid. */
  BatchTranslateMetadata_State_StateUnspecified = 0,

  /** Request is being processed. */
  BatchTranslateMetadata_State_Running = 1,

  /**
   * The batch is processed, and at least one item has been successfully
   * processed.
   **/
  BatchTranslateMetadata_State_Succeeded = 2,

  /** The batch is done and no item has been successfully processed. */
  BatchTranslateMetadata_State_Failed = 3,

  /**
   * Request is in the process of being canceled after caller invoked
   * longrunning.Operations.CancelOperation on the request id.
   **/
  BatchTranslateMetadata_State_Cancelling = 4,

  /**
   * The batch is done after the user has called the
   * longrunning.Operations.CancelOperation. Any records processed before the
   * cancel command are output as specified in the request.
   **/
  BatchTranslateMetadata_State_Cancelled = 5,
};

GPBEnumDescriptor *BatchTranslateMetadata_State_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BatchTranslateMetadata_State_IsValidValue(int32_t value);

#pragma mark - Enum CreateGlossaryMetadata_State

/** Enumerates the possible states that the creation request can be in. */
typedef GPB_ENUM(CreateGlossaryMetadata_State) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  CreateGlossaryMetadata_State_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Invalid. */
  CreateGlossaryMetadata_State_StateUnspecified = 0,

  /** Request is being processed. */
  CreateGlossaryMetadata_State_Running = 1,

  /** The glossary has been successfully created. */
  CreateGlossaryMetadata_State_Succeeded = 2,

  /** Failed to create the glossary. */
  CreateGlossaryMetadata_State_Failed = 3,

  /**
   * Request is in the process of being canceled after caller invoked
   * longrunning.Operations.CancelOperation on the request id.
   **/
  CreateGlossaryMetadata_State_Cancelling = 4,

  /** The glossary creation request has been successfully canceled. */
  CreateGlossaryMetadata_State_Cancelled = 5,
};

GPBEnumDescriptor *CreateGlossaryMetadata_State_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CreateGlossaryMetadata_State_IsValidValue(int32_t value);

#pragma mark - Enum DeleteGlossaryMetadata_State

/** Enumerates the possible states that the creation request can be in. */
typedef GPB_ENUM(DeleteGlossaryMetadata_State) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DeleteGlossaryMetadata_State_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Invalid. */
  DeleteGlossaryMetadata_State_StateUnspecified = 0,

  /** Request is being processed. */
  DeleteGlossaryMetadata_State_Running = 1,

  /** The glossary was successfully deleted. */
  DeleteGlossaryMetadata_State_Succeeded = 2,

  /** Failed to delete the glossary. */
  DeleteGlossaryMetadata_State_Failed = 3,

  /**
   * Request is in the process of being canceled after caller invoked
   * longrunning.Operations.CancelOperation on the request id.
   **/
  DeleteGlossaryMetadata_State_Cancelling = 4,

  /** The glossary deletion request has been successfully canceled. */
  DeleteGlossaryMetadata_State_Cancelled = 5,
};

GPBEnumDescriptor *DeleteGlossaryMetadata_State_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DeleteGlossaryMetadata_State_IsValidValue(int32_t value);

#pragma mark - TranslationServiceRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface TranslationServiceRoot : GPBRootObject
@end

#pragma mark - TranslateTextGlossaryConfig

typedef GPB_ENUM(TranslateTextGlossaryConfig_FieldNumber) {
  TranslateTextGlossaryConfig_FieldNumber_Glossary = 1,
  TranslateTextGlossaryConfig_FieldNumber_IgnoreCase = 2,
};

/**
 * Configures which glossary should be used for a specific target language,
 * and defines options for applying that glossary.
 **/
GPB_FINAL @interface TranslateTextGlossaryConfig : GPBMessage

/**
 * Required. Specifies the glossary used for this translation. Use
 * this format: projects/\*\/locations/\*\/glossaries/\*
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *glossary;

/**
 * Optional. Indicates whether we should do a case-insensitive match.
 * Default value is false if missing.
 **/
@property(nonatomic, readwrite) BOOL ignoreCase;

@end

#pragma mark - TranslateTextRequest

typedef GPB_ENUM(TranslateTextRequest_FieldNumber) {
  TranslateTextRequest_FieldNumber_ContentsArray = 1,
  TranslateTextRequest_FieldNumber_MimeType = 3,
  TranslateTextRequest_FieldNumber_SourceLanguageCode = 4,
  TranslateTextRequest_FieldNumber_TargetLanguageCode = 5,
  TranslateTextRequest_FieldNumber_Model = 6,
  TranslateTextRequest_FieldNumber_GlossaryConfig = 7,
  TranslateTextRequest_FieldNumber_Parent = 8,
};

/**
 * The request message for synchronous translation.
 **/
GPB_FINAL @interface TranslateTextRequest : GPBMessage

/**
 * Required. The content of the input in string format.
 * We recommend the total contents to be less than 30k codepoints.
 * Please use BatchTranslateText for larger text.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *contentsArray;
/** The number of items in @c contentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger contentsArray_Count;

/**
 * Optional. The format of the source text, for example, "text/html",
 *  "text/plain". If left blank, the MIME type is assumed to be "text/html".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *mimeType;

/**
 * Optional. The BCP-47 language code of the input text if
 * known, for example, "en-US" or "sr-Latn". Supported language codes are
 * listed in Language Support. If the source language isn't specified, the API
 * attempts to identify the source language automatically and returns the
 * the source language within the response.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceLanguageCode;

/**
 * Required. The BCP-47 language code to use for translation of the input
 * text, set to one of the language codes listed in Language Support.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetLanguageCode;

/**
 * Optional. Only used when making regionalized call.
 * Format:
 * projects/{project-id}/locations/{location-id}.
 *
 * Only custom model/glossary within the same location-id can be used.
 * Otherwise 400 is returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *parent;

/**
 * Optional. The `model` type requested for this translation.
 *
 * The format  depends on model type:
 * 1. Custom models:
 * projects/{project-id}/locations/{location-id}/models/{model-id}.
 * 2. General (built-in) models:
 * projects/{project-id}/locations/{location-id}/models/general/nmt
 * projects/{project-id}/locations/{location-id}/models/general/base
 *
 * For global (non-regionalized) requests, use {location-id} 'global'.
 * For example,
 * projects/{project-id}/locations/global/models/general/nmt
 *
 * If missing, the system decides which google base model to use.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/**
 * Optional. Glossary to be applied. The glossary needs to be in the same
 * region as the model, otherwise an INVALID_ARGUMENT error is returned.
 **/
@property(nonatomic, readwrite, strong, null_resettable) TranslateTextGlossaryConfig *glossaryConfig;
/** Test to see if @c glossaryConfig has been set. */
@property(nonatomic, readwrite) BOOL hasGlossaryConfig;

@end

#pragma mark - TranslateTextResponse

typedef GPB_ENUM(TranslateTextResponse_FieldNumber) {
  TranslateTextResponse_FieldNumber_TranslationsArray = 1,
  TranslateTextResponse_FieldNumber_GlossaryTranslationsArray = 3,
};

/**
 * The main language translation response message.
 **/
GPB_FINAL @interface TranslateTextResponse : GPBMessage

/**
 * Text translation responses with no glossary applied.
 * This field has the same length as `contents` in TranslateTextRequest.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Translation*> *translationsArray;
/** The number of items in @c translationsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger translationsArray_Count;

/**
 * Text translation responses if a glossary is provided in the request.
 * This could be the same as 'translation' above if no terms apply.
 * This field has the same length as `contents` in TranslateTextRequest.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Translation*> *glossaryTranslationsArray;
/** The number of items in @c glossaryTranslationsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger glossaryTranslationsArray_Count;

@end

#pragma mark - Translation

typedef GPB_ENUM(Translation_FieldNumber) {
  Translation_FieldNumber_TranslatedText = 1,
  Translation_FieldNumber_Model = 2,
  Translation_FieldNumber_GlossaryConfig = 3,
  Translation_FieldNumber_DetectedLanguageCode = 4,
};

/**
 * A single translation response.
 **/
GPB_FINAL @interface Translation : GPBMessage

/** Text translated into the target language. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *translatedText;

/**
 * Only present when `model` is present in the request.
 * This is same as `model` provided in the request.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/**
 * The BCP-47 language code of source text in the initial request, detected
 * automatically, if no source language was passed within the initial
 * request. If the source language was passed, auto-detection of the language
 * does not occur and this field will be empty.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *detectedLanguageCode;

/** The `glossary_config` used for this translation. */
@property(nonatomic, readwrite, strong, null_resettable) TranslateTextGlossaryConfig *glossaryConfig;
/** Test to see if @c glossaryConfig has been set. */
@property(nonatomic, readwrite) BOOL hasGlossaryConfig;

@end

#pragma mark - DetectLanguageRequest

typedef GPB_ENUM(DetectLanguageRequest_FieldNumber) {
  DetectLanguageRequest_FieldNumber_Content = 1,
  DetectLanguageRequest_FieldNumber_MimeType = 3,
  DetectLanguageRequest_FieldNumber_Model = 4,
  DetectLanguageRequest_FieldNumber_Parent = 5,
};

typedef GPB_ENUM(DetectLanguageRequest_Source_OneOfCase) {
  DetectLanguageRequest_Source_OneOfCase_GPBUnsetOneOfCase = 0,
  DetectLanguageRequest_Source_OneOfCase_Content = 1,
};

/**
 * The request message for language detection.
 **/
GPB_FINAL @interface DetectLanguageRequest : GPBMessage

/**
 * Optional. Only used when making regionalized call.
 * Format:
 * projects/{project-id}/locations/{location-id}.
 *
 * Only custom model within the same location-id can be used.
 * Otherwise 400 is returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *parent;

/**
 * Optional. The language detection model to be used.
 * projects/{project-id}/locations/{location-id}/models/language-detection/{model-id}
 * If not specified, default will be used.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/** Required. The source of the document from which to detect the language. */
@property(nonatomic, readonly) DetectLanguageRequest_Source_OneOfCase sourceOneOfCase;

/** The content of the input stored as a string. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/**
 * Optional. The format of the source text, for example, "text/html",
 * "text/plain". If left blank, the MIME type is assumed to be "text/html".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *mimeType;

@end

/**
 * Clears whatever value was set for the oneof 'source'.
 **/
void DetectLanguageRequest_ClearSourceOneOfCase(DetectLanguageRequest *message);

#pragma mark - DetectedLanguage

typedef GPB_ENUM(DetectedLanguage_FieldNumber) {
  DetectedLanguage_FieldNumber_LanguageCode = 1,
  DetectedLanguage_FieldNumber_Confidence = 2,
};

/**
 * The response message for language detection.
 **/
GPB_FINAL @interface DetectedLanguage : GPBMessage

/**
 * The BCP-47 language code of source content in the request, detected
 * automatically.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

/** The confidence of the detection result for this language. */
@property(nonatomic, readwrite) float confidence;

@end

#pragma mark - DetectLanguageResponse

typedef GPB_ENUM(DetectLanguageResponse_FieldNumber) {
  DetectLanguageResponse_FieldNumber_LanguagesArray = 1,
};

/**
 * The response message for language detection.
 **/
GPB_FINAL @interface DetectLanguageResponse : GPBMessage

/**
 * A list of detected languages sorted by detection confidence in descending
 * order. The most probable language first.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DetectedLanguage*> *languagesArray;
/** The number of items in @c languagesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger languagesArray_Count;

@end

#pragma mark - GetSupportedLanguagesRequest

typedef GPB_ENUM(GetSupportedLanguagesRequest_FieldNumber) {
  GetSupportedLanguagesRequest_FieldNumber_DisplayLanguageCode = 1,
  GetSupportedLanguagesRequest_FieldNumber_Model = 2,
  GetSupportedLanguagesRequest_FieldNumber_Parent = 3,
};

/**
 * The request message for discovering supported languages.
 **/
GPB_FINAL @interface GetSupportedLanguagesRequest : GPBMessage

/**
 * Optional. Used for making regionalized calls.
 * Format: projects/{project-id}/locations/{location-id}.
 * For global calls, use projects/{project-id}/locations/global.
 * If missing, the call is treated as a global call.
 *
 * Only custom model within the same location-id can be used.
 * Otherwise 400 is returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *parent;

/**
 * Optional. The language to use to return localized, human readable names
 * of supported languages. If missing, default language is ENGLISH.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *displayLanguageCode;

/**
 * Optional. Get supported languages of this model.
 * The format depends on model type:
 * 1. Custom models:
 * projects/{project-id}/locations/{location-id}/models/{model-id}.
 * 2. General (built-in) models:
 * projects/{project-id}/locations/{location-id}/models/general/nmt
 * projects/{project-id}/locations/{location-id}/models/general/base
 * Returns languages supported by the specified model.
 * If missing, we get supported languages of Google general NMT model.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

@end

#pragma mark - SupportedLanguages

typedef GPB_ENUM(SupportedLanguages_FieldNumber) {
  SupportedLanguages_FieldNumber_LanguagesArray = 1,
};

/**
 * The response message for discovering supported languages.
 **/
GPB_FINAL @interface SupportedLanguages : GPBMessage

/**
 * A list of supported language responses. This list contains an entry
 * for each language the Translation API supports.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SupportedLanguage*> *languagesArray;
/** The number of items in @c languagesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger languagesArray_Count;

@end

#pragma mark - SupportedLanguage

typedef GPB_ENUM(SupportedLanguage_FieldNumber) {
  SupportedLanguage_FieldNumber_LanguageCode = 1,
  SupportedLanguage_FieldNumber_DisplayName = 2,
  SupportedLanguage_FieldNumber_SupportSource = 3,
  SupportedLanguage_FieldNumber_SupportTarget = 4,
};

/**
 * A single supported language response corresponds to information related
 * to one supported language.
 **/
GPB_FINAL @interface SupportedLanguage : GPBMessage

/**
 * Supported language code, generally consisting of its ISO 639-1
 * identifier, for example, 'en', 'ja'. In certain cases, BCP-47 codes
 * including language and region identifiers are returned (for example,
 * 'zh-TW' and 'zh-CN')
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

/**
 * Human readable name of the language localized in the display language
 * specified in the request.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *displayName;

/** Can be used as source language. */
@property(nonatomic, readwrite) BOOL supportSource;

/** Can be used as target language. */
@property(nonatomic, readwrite) BOOL supportTarget;

@end

#pragma mark - GcsSource

typedef GPB_ENUM(GcsSource_FieldNumber) {
  GcsSource_FieldNumber_InputUri = 1,
};

/**
 * The GCS location for the input content.
 **/
GPB_FINAL @interface GcsSource : GPBMessage

/** Required. Source data URI. For example, `gs://my_bucket/my_object`. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *inputUri;

@end

#pragma mark - InputConfig

typedef GPB_ENUM(InputConfig_FieldNumber) {
  InputConfig_FieldNumber_MimeType = 1,
  InputConfig_FieldNumber_GcsSource = 2,
};

typedef GPB_ENUM(InputConfig_Source_OneOfCase) {
  InputConfig_Source_OneOfCase_GPBUnsetOneOfCase = 0,
  InputConfig_Source_OneOfCase_GcsSource = 2,
};

/**
 * Input configuration.
 **/
GPB_FINAL @interface InputConfig : GPBMessage

/**
 * Optional. Can be "text/plain" or "text/html".
 * For `.tsv`, "text/html" is used if mime_type is missing.
 * For `.html`, this field must be "text/html" or empty.
 * For `.txt`, this field must be "text/plain" or empty.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *mimeType;

/** Required. Specify the input. */
@property(nonatomic, readonly) InputConfig_Source_OneOfCase sourceOneOfCase;

/**
 * Required. Google Cloud Storage location for the source input.
 * This can be a single file (for example,
 * `gs://translation-test/input.tsv`) or a wildcard (for example,
 * `gs://translation-test/\*`). If a file extension is `.tsv`, it can
 * contain either one or two columns. The first column (optional) is the id
 * of the text request. If the first column is missing, we use the row
 * number (0-based) from the input file as the ID in the output file. The
 * second column is the actual text to be
 *  translated. We recommend each row be <= 10K Unicode codepoints,
 * otherwise an error might be returned.
 *
 * The other supported file extensions are `.txt` or `.html`, which is
 * treated as a single large chunk of text.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GcsSource *gcsSource;

@end

/**
 * Clears whatever value was set for the oneof 'source'.
 **/
void InputConfig_ClearSourceOneOfCase(InputConfig *message);

#pragma mark - GcsDestination

typedef GPB_ENUM(GcsDestination_FieldNumber) {
  GcsDestination_FieldNumber_OutputUriPrefix = 1,
};

/**
 * The GCS location for the output content
 **/
GPB_FINAL @interface GcsDestination : GPBMessage

/**
 * Required. There must be no files under 'output_uri_prefix'.
 * 'output_uri_prefix' must end with "/". Otherwise error 400 is returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *outputUriPrefix;

@end

#pragma mark - OutputConfig

typedef GPB_ENUM(OutputConfig_FieldNumber) {
  OutputConfig_FieldNumber_GcsDestination = 1,
};

typedef GPB_ENUM(OutputConfig_Destination_OneOfCase) {
  OutputConfig_Destination_OneOfCase_GPBUnsetOneOfCase = 0,
  OutputConfig_Destination_OneOfCase_GcsDestination = 1,
};

/**
 * Output configuration.
 **/
GPB_FINAL @interface OutputConfig : GPBMessage

/** Required. The destination of output. */
@property(nonatomic, readonly) OutputConfig_Destination_OneOfCase destinationOneOfCase;

/**
 * Google Cloud Storage destination for output content.
 * For every single input file (for example, gs://a/b/c.[extension]), we
 * generate at most 2 * n output files. (n is the # of target_language_codes
 * in the BatchTranslateTextRequest).
 *
 * Output files (tsv) generated are compliant with RFC 4180 except that
 * record delimiters are '\\n' instead of '\\r\\n'. We don't provide any way to
 * change record delimiters.
 *
 * While the input files are being processed, we write/update an index file
 * 'index.csv'  under 'output_uri_prefix' (for example,
 * gs://translation-test/index.csv) The index file is generated/updated as
 * new files are being translated. The format is:
 *
 * input_file,target_language_code,translations_file,errors_file,
 * glossary_translations_file,glossary_errors_file
 *
 * input_file is one file we matched using gcs_source.input_uri.
 * target_language_code is provided in the request.
 * translations_file contains the translations. (details provided below)
 * errors_file contains the errors during processing of the file. (details
 * below). Both translations_file and errors_file could be empty
 * strings if we have no content to output.
 * glossary_translations_file,glossary_errors_file are always empty string
 * if input_file is tsv. They could also be empty if we have no content to
 * output.
 *
 * Once a row is present in index.csv, the input/output matching never
 * changes. Callers should also expect all the content in input_file are
 * processed and ready to be consumed (that is, No partial output file is
 * written).
 *
 * The format of translations_file (for target language code 'trg') is:
 * gs://translation_test/a_b_c_'trg'_translations.[extension]
 *
 * If the input file extension is tsv, the output has the following
 * columns:
 * Column 1: ID of the request provided in the input, if it's not
 * provided in the input, then the input row number is used (0-based).
 * Column 2: source sentence.
 * Column 3: translation without applying a glossary. Empty string if there
 * is an error.
 * Column 4 (only present if a glossary is provided in the request):
 * translation after applying the glossary. Empty string if there is an
 * error applying the glossary. Could be same string as column 3 if there is
 * no glossary applied.
 *
 * If input file extension is a txt or html, the translation is directly
 * written to the output file. If glossary is requested, a separate
 * glossary_translations_file has format of
 * gs://translation_test/a_b_c_'trg'_glossary_translations.[extension]
 *
 * The format of errors file (for target language code 'trg') is:
 * gs://translation_test/a_b_c_'trg'_errors.[extension]
 *
 * If the input file extension is tsv, errors_file has the
 * following Column 1: ID of the request provided in the input, if it's not
 * provided in the input, then the input row number is used (0-based).
 * Column 2: source sentence.
 * Column 3: Error detail for the translation. Could be empty.
 * Column 4 (only present if a glossary is provided in the request):
 * Error when applying the glossary.
 *
 * If the input file extension is txt or html, glossary_error_file will be
 * generated that contains error details. glossary_error_file has format of
 * gs://translation_test/a_b_c_'trg'_glossary_errors.[extension]
 **/
@property(nonatomic, readwrite, strong, null_resettable) GcsDestination *gcsDestination;

@end

/**
 * Clears whatever value was set for the oneof 'destination'.
 **/
void OutputConfig_ClearDestinationOneOfCase(OutputConfig *message);

#pragma mark - BatchTranslateTextRequest

typedef GPB_ENUM(BatchTranslateTextRequest_FieldNumber) {
  BatchTranslateTextRequest_FieldNumber_Parent = 1,
  BatchTranslateTextRequest_FieldNumber_SourceLanguageCode = 2,
  BatchTranslateTextRequest_FieldNumber_TargetLanguageCodesArray = 3,
  BatchTranslateTextRequest_FieldNumber_Models = 4,
  BatchTranslateTextRequest_FieldNumber_InputConfigsArray = 5,
  BatchTranslateTextRequest_FieldNumber_OutputConfig = 6,
  BatchTranslateTextRequest_FieldNumber_Glossaries = 7,
};

/**
 * The batch translation request.
 **/
GPB_FINAL @interface BatchTranslateTextRequest : GPBMessage

/**
 * Optional. Only used when making regionalized call.
 * Format:
 * projects/{project-id}/locations/{location-id}.
 *
 * Only custom models/glossaries within the same location-id can be used.
 * Otherwise 400 is returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *parent;

/** Required. Source language code. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceLanguageCode;

/** Required. Specify up to 10 language codes here. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *targetLanguageCodesArray;
/** The number of items in @c targetLanguageCodesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger targetLanguageCodesArray_Count;

/**
 * Optional. The models to use for translation. Map's key is target language
 * code. Map's value is model name. Value can be a built-in general model,
 * or a custom model built by AutoML.
 *
 * The value format depends on model type:
 * 1. Custom models:
 * projects/{project-id}/locations/{location-id}/models/{model-id}.
 * 2. General (built-in) models:
 * projects/{project-id}/locations/{location-id}/models/general/nmt
 * projects/{project-id}/locations/{location-id}/models/general/base
 *
 * If the map is empty or a specific model is
 * not requested for a language pair, then default google model is used.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *models;
/** The number of items in @c models without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger models_Count;

/**
 * Required. Input configurations.
 * The total number of files matched should be <= 1000.
 * The total content size should be <= 100M Unicode codepoints.
 * The files must use UTF-8 encoding.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<InputConfig*> *inputConfigsArray;
/** The number of items in @c inputConfigsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inputConfigsArray_Count;

/**
 * Required. Output configuration.
 * If 2 input configs match to the same file (that is, same input path),
 * we don't generate output for duplicate inputs.
 **/
@property(nonatomic, readwrite, strong, null_resettable) OutputConfig *outputConfig;
/** Test to see if @c outputConfig has been set. */
@property(nonatomic, readwrite) BOOL hasOutputConfig;

/**
 * Optional. Glossaries to be applied for translation.
 * It's keyed by target language code.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, TranslateTextGlossaryConfig*> *glossaries;
/** The number of items in @c glossaries without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger glossaries_Count;

@end

#pragma mark - BatchTranslateMetadata

typedef GPB_ENUM(BatchTranslateMetadata_FieldNumber) {
  BatchTranslateMetadata_FieldNumber_State = 1,
  BatchTranslateMetadata_FieldNumber_TranslatedCharacters = 2,
  BatchTranslateMetadata_FieldNumber_FailedCharacters = 3,
  BatchTranslateMetadata_FieldNumber_TotalCharacters = 4,
  BatchTranslateMetadata_FieldNumber_SubmitTime = 5,
};

/**
 * State metadata for the batch translation operation.
 **/
GPB_FINAL @interface BatchTranslateMetadata : GPBMessage

/** The state of the operation. */
@property(nonatomic, readwrite) BatchTranslateMetadata_State state;

/** Number of successfully translated characters so far (Unicode codepoints). */
@property(nonatomic, readwrite) int64_t translatedCharacters;

/**
 * Number of characters that have failed to process so far (Unicode
 * codepoints).
 **/
@property(nonatomic, readwrite) int64_t failedCharacters;

/**
 * Total number of characters (Unicode codepoints).
 * This is the total number of codepoints from input files times the number of
 * target languages. It appears here shortly after the call is submitted.
 **/
@property(nonatomic, readwrite) int64_t totalCharacters;

/** Time when the operation was submitted. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

@end

/**
 * Fetches the raw value of a @c BatchTranslateMetadata's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t BatchTranslateMetadata_State_RawValue(BatchTranslateMetadata *message);
/**
 * Sets the raw value of an @c BatchTranslateMetadata's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetBatchTranslateMetadata_State_RawValue(BatchTranslateMetadata *message, int32_t value);

#pragma mark - BatchTranslateResponse

typedef GPB_ENUM(BatchTranslateResponse_FieldNumber) {
  BatchTranslateResponse_FieldNumber_TotalCharacters = 1,
  BatchTranslateResponse_FieldNumber_TranslatedCharacters = 2,
  BatchTranslateResponse_FieldNumber_FailedCharacters = 3,
  BatchTranslateResponse_FieldNumber_SubmitTime = 4,
  BatchTranslateResponse_FieldNumber_EndTime = 5,
};

/**
 * Stored in the [google.longrunning.Operation.response][google.longrunning.Operation.response] field returned by
 * BatchTranslateText if at least one sentence is translated successfully.
 **/
GPB_FINAL @interface BatchTranslateResponse : GPBMessage

/** Total number of characters (Unicode codepoints). */
@property(nonatomic, readwrite) int64_t totalCharacters;

/** Number of successfully translated characters (Unicode codepoints). */
@property(nonatomic, readwrite) int64_t translatedCharacters;

/** Number of characters that have failed to process (Unicode codepoints). */
@property(nonatomic, readwrite) int64_t failedCharacters;

/** Time when the operation was submitted. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

/**
 * The time when the operation is finished and
 * [google.longrunning.Operation.done][google.longrunning.Operation.done] is set to true.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *endTime;
/** Test to see if @c endTime has been set. */
@property(nonatomic, readwrite) BOOL hasEndTime;

@end

#pragma mark - GlossaryInputConfig

typedef GPB_ENUM(GlossaryInputConfig_FieldNumber) {
  GlossaryInputConfig_FieldNumber_GcsSource = 1,
};

typedef GPB_ENUM(GlossaryInputConfig_Source_OneOfCase) {
  GlossaryInputConfig_Source_OneOfCase_GPBUnsetOneOfCase = 0,
  GlossaryInputConfig_Source_OneOfCase_GcsSource = 1,
};

/**
 * Input configuration for glossaries.
 **/
GPB_FINAL @interface GlossaryInputConfig : GPBMessage

/** Required. Specify the input. */
@property(nonatomic, readonly) GlossaryInputConfig_Source_OneOfCase sourceOneOfCase;

/**
 * Required. Google Cloud Storage location of glossary data.
 * File format is determined based on file name extension. API returns
 * [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file
 * formats. Wildcards are not allowed. This must be a single file in one of
 * the following formats:
 *
 * For `UNIDIRECTIONAL` glossaries:
 *
 * - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated.
 *   The first column is source text. The second column is target text.
 *   The file must not contain headers. That is, the first row is data, not
 *   column names.
 *
 * - TMX (`.tmx`): TMX file with parallel data defining source/target term
 * pairs.
 *
 * For `EQUIVALENT_TERMS_SET` glossaries:
 *
 * - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms
 *   in multiple languages. The format is defined for Google Translation
 *   Toolkit and documented here:
 *   `https://support.google.com/translatortoolkit/answer/6306379?hl=en`.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GcsSource *gcsSource;

@end

/**
 * Clears whatever value was set for the oneof 'source'.
 **/
void GlossaryInputConfig_ClearSourceOneOfCase(GlossaryInputConfig *message);

#pragma mark - Glossary

typedef GPB_ENUM(Glossary_FieldNumber) {
  Glossary_FieldNumber_Name = 1,
  Glossary_FieldNumber_LanguagePair = 3,
  Glossary_FieldNumber_LanguageCodesSet = 4,
  Glossary_FieldNumber_InputConfig = 5,
  Glossary_FieldNumber_EntryCount = 6,
  Glossary_FieldNumber_SubmitTime = 7,
  Glossary_FieldNumber_EndTime = 8,
};

typedef GPB_ENUM(Glossary_Languages_OneOfCase) {
  Glossary_Languages_OneOfCase_GPBUnsetOneOfCase = 0,
  Glossary_Languages_OneOfCase_LanguagePair = 3,
  Glossary_Languages_OneOfCase_LanguageCodesSet = 4,
};

/**
 * Represents a glossary built from user provided data.
 **/
GPB_FINAL @interface Glossary : GPBMessage

/**
 * Required. The resource name of the glossary. Glossary names have the form
 * `projects/{project-id}/locations/{location-id}/glossaries/{glossary-id}`.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Languages supported by the glossary. */
@property(nonatomic, readonly) Glossary_Languages_OneOfCase languagesOneOfCase;

/** Used with UNIDIRECTIONAL. */
@property(nonatomic, readwrite, strong, null_resettable) Glossary_LanguageCodePair *languagePair;

/** Used with EQUIVALENT_TERMS_SET. */
@property(nonatomic, readwrite, strong, null_resettable) Glossary_LanguageCodesSet *languageCodesSet;

/**
 * Required. Provides examples to build the glossary from.
 * Total glossary must not exceed 10M Unicode codepoints.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GlossaryInputConfig *inputConfig;
/** Test to see if @c inputConfig has been set. */
@property(nonatomic, readwrite) BOOL hasInputConfig;

/** Output only. The number of entries defined in the glossary. */
@property(nonatomic, readwrite) int32_t entryCount;

/** Output only. When CreateGlossary was called. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

/** Output only. When the glossary creation was finished. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *endTime;
/** Test to see if @c endTime has been set. */
@property(nonatomic, readwrite) BOOL hasEndTime;

@end

/**
 * Clears whatever value was set for the oneof 'languages'.
 **/
void Glossary_ClearLanguagesOneOfCase(Glossary *message);

#pragma mark - Glossary_LanguageCodePair

typedef GPB_ENUM(Glossary_LanguageCodePair_FieldNumber) {
  Glossary_LanguageCodePair_FieldNumber_SourceLanguageCode = 1,
  Glossary_LanguageCodePair_FieldNumber_TargetLanguageCode = 2,
};

/**
 * Used with UNIDIRECTIONAL.
 **/
GPB_FINAL @interface Glossary_LanguageCodePair : GPBMessage

/**
 * Required. The BCP-47 language code of the input text, for example,
 * "en-US". Expected to be an exact match for GlossaryTerm.language_code.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceLanguageCode;

/**
 * Required. The BCP-47 language code for translation output, for example,
 * "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetLanguageCode;

@end

#pragma mark - Glossary_LanguageCodesSet

typedef GPB_ENUM(Glossary_LanguageCodesSet_FieldNumber) {
  Glossary_LanguageCodesSet_FieldNumber_LanguageCodesArray = 1,
};

/**
 * Used with EQUIVALENT_TERMS_SET.
 **/
GPB_FINAL @interface Glossary_LanguageCodesSet : GPBMessage

/**
 * The BCP-47 language code(s) for terms defined in the glossary.
 * All entries are unique. The list contains at least two entries.
 * Expected to be an exact match for GlossaryTerm.language_code.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *languageCodesArray;
/** The number of items in @c languageCodesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger languageCodesArray_Count;

@end

#pragma mark - CreateGlossaryRequest

typedef GPB_ENUM(CreateGlossaryRequest_FieldNumber) {
  CreateGlossaryRequest_FieldNumber_Parent = 1,
  CreateGlossaryRequest_FieldNumber_Glossary = 2,
};

/**
 * Request message for CreateGlossary.
 **/
GPB_FINAL @interface CreateGlossaryRequest : GPBMessage

/** Required. The project name. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *parent;

/** Required. The glossary to create. */
@property(nonatomic, readwrite, strong, null_resettable) Glossary *glossary;
/** Test to see if @c glossary has been set. */
@property(nonatomic, readwrite) BOOL hasGlossary;

@end

#pragma mark - GetGlossaryRequest

typedef GPB_ENUM(GetGlossaryRequest_FieldNumber) {
  GetGlossaryRequest_FieldNumber_Name = 1,
};

/**
 * Request message for GetGlossary.
 **/
GPB_FINAL @interface GetGlossaryRequest : GPBMessage

/** Required. The name of the glossary to retrieve. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - DeleteGlossaryRequest

typedef GPB_ENUM(DeleteGlossaryRequest_FieldNumber) {
  DeleteGlossaryRequest_FieldNumber_Name = 1,
};

/**
 * Request message for DeleteGlossary.
 **/
GPB_FINAL @interface DeleteGlossaryRequest : GPBMessage

/** Required. The name of the glossary to delete. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - ListGlossariesRequest

typedef GPB_ENUM(ListGlossariesRequest_FieldNumber) {
  ListGlossariesRequest_FieldNumber_Parent = 1,
  ListGlossariesRequest_FieldNumber_PageSize = 2,
  ListGlossariesRequest_FieldNumber_PageToken = 3,
  ListGlossariesRequest_FieldNumber_Filter = 4,
};

/**
 * Request message for ListGlossaries.
 **/
GPB_FINAL @interface ListGlossariesRequest : GPBMessage

/** Required. The name of the project from which to list all of the glossaries. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *parent;

/**
 * Optional. Requested page size. The server may return fewer glossaries than
 * requested. If unspecified, the server picks an appropriate default.
 **/
@property(nonatomic, readwrite) int32_t pageSize;

/**
 * Optional. A token identifying a page of results the server should return.
 * Typically, this is the value of [ListGlossariesResponse.next_page_token]
 * returned from the previous call to `ListGlossaries` method.
 * The first page is returned if `page_token`is empty or missing.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *pageToken;

/**
 * Optional. Filter specifying constraints of a list operation.
 * For example, `tags.glossary_name="products*"`.
 * If missing, no filtering is performed.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *filter;

@end

#pragma mark - ListGlossariesResponse

typedef GPB_ENUM(ListGlossariesResponse_FieldNumber) {
  ListGlossariesResponse_FieldNumber_GlossariesArray = 1,
  ListGlossariesResponse_FieldNumber_NextPageToken = 2,
};

/**
 * Response message for ListGlossaries.
 **/
GPB_FINAL @interface ListGlossariesResponse : GPBMessage

/** The list of glossaries for a project. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Glossary*> *glossariesArray;
/** The number of items in @c glossariesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger glossariesArray_Count;

/**
 * A token to retrieve a page of results. Pass this value in the
 * [ListGlossariesRequest.page_token] field in the subsequent call to
 * `ListGlossaries` method to retrieve the next page of results.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *nextPageToken;

@end

#pragma mark - CreateGlossaryMetadata

typedef GPB_ENUM(CreateGlossaryMetadata_FieldNumber) {
  CreateGlossaryMetadata_FieldNumber_Name = 1,
  CreateGlossaryMetadata_FieldNumber_State = 2,
  CreateGlossaryMetadata_FieldNumber_SubmitTime = 3,
};

/**
 * Stored in the [google.longrunning.Operation.metadata][google.longrunning.Operation.metadata] field returned by
 * CreateGlossary.
 **/
GPB_FINAL @interface CreateGlossaryMetadata : GPBMessage

/** The name of the glossary that is being created. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** The current state of the glossary creation operation. */
@property(nonatomic, readwrite) CreateGlossaryMetadata_State state;

/** The time when the operation was submitted to the server. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

@end

/**
 * Fetches the raw value of a @c CreateGlossaryMetadata's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t CreateGlossaryMetadata_State_RawValue(CreateGlossaryMetadata *message);
/**
 * Sets the raw value of an @c CreateGlossaryMetadata's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetCreateGlossaryMetadata_State_RawValue(CreateGlossaryMetadata *message, int32_t value);

#pragma mark - DeleteGlossaryMetadata

typedef GPB_ENUM(DeleteGlossaryMetadata_FieldNumber) {
  DeleteGlossaryMetadata_FieldNumber_Name = 1,
  DeleteGlossaryMetadata_FieldNumber_State = 2,
  DeleteGlossaryMetadata_FieldNumber_SubmitTime = 3,
};

/**
 * Stored in the [google.longrunning.Operation.metadata][google.longrunning.Operation.metadata] field returned by
 * DeleteGlossary.
 **/
GPB_FINAL @interface DeleteGlossaryMetadata : GPBMessage

/** The name of the glossary that is being deleted. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** The current state of the glossary deletion operation. */
@property(nonatomic, readwrite) DeleteGlossaryMetadata_State state;

/** The time when the operation was submitted to the server. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

@end

/**
 * Fetches the raw value of a @c DeleteGlossaryMetadata's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DeleteGlossaryMetadata_State_RawValue(DeleteGlossaryMetadata *message);
/**
 * Sets the raw value of an @c DeleteGlossaryMetadata's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDeleteGlossaryMetadata_State_RawValue(DeleteGlossaryMetadata *message, int32_t value);

#pragma mark - DeleteGlossaryResponse

typedef GPB_ENUM(DeleteGlossaryResponse_FieldNumber) {
  DeleteGlossaryResponse_FieldNumber_Name = 1,
  DeleteGlossaryResponse_FieldNumber_SubmitTime = 2,
  DeleteGlossaryResponse_FieldNumber_EndTime = 3,
};

/**
 * Stored in the [google.longrunning.Operation.response][google.longrunning.Operation.response] field returned by
 * DeleteGlossary.
 **/
GPB_FINAL @interface DeleteGlossaryResponse : GPBMessage

/** The name of the deleted glossary. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** The time when the operation was submitted to the server. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

/**
 * The time when the glossary deletion is finished and
 * [google.longrunning.Operation.done][google.longrunning.Operation.done] is set to true.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *endTime;
/** Test to see if @c endTime has been set. */
@property(nonatomic, readwrite) BOOL hasEndTime;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
