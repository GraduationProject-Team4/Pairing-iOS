// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/texttospeech/v1beta1/cloud_tts.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AudioConfig;
@class SynthesisInput;
@class Voice;
@class VoiceSelectionParams;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SsmlVoiceGender

/**
 * Gender of the voice as described in
 * [SSML voice element](https://www.w3.org/TR/speech-synthesis11/#edef_voice).
 **/
typedef GPB_ENUM(SsmlVoiceGender) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SsmlVoiceGender_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * An unspecified gender.
   * In VoiceSelectionParams, this means that the client doesn't care which
   * gender the selected voice will have. In the Voice field of
   * ListVoicesResponse, this may mean that the voice doesn't fit any of the
   * other categories in this enum, or that the gender of the voice isn't known.
   **/
  SsmlVoiceGender_SsmlVoiceGenderUnspecified = 0,

  /** A male voice. */
  SsmlVoiceGender_Male = 1,

  /** A female voice. */
  SsmlVoiceGender_Female = 2,

  /** A gender-neutral voice. */
  SsmlVoiceGender_Neutral = 3,
};

GPBEnumDescriptor *SsmlVoiceGender_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SsmlVoiceGender_IsValidValue(int32_t value);

#pragma mark - Enum AudioEncoding

/**
 * Configuration to set up audio encoder. The encoding determines the output
 * audio format that we'd like.
 **/
typedef GPB_ENUM(AudioEncoding) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  AudioEncoding_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][]. */
  AudioEncoding_AudioEncodingUnspecified = 0,

  /**
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   * Audio content returned as LINEAR16 also contains a WAV header.
   **/
  AudioEncoding_Linear16 = 1,

  /** MP3 audio. */
  AudioEncoding_Mp3 = 2,

  /**
   * Opus encoded audio wrapped in an ogg container. The result will be a
   * file which can be played natively on Android, and in browsers (at least
   * Chrome and Firefox). The quality of the encoding is considerably higher
   * than MP3 while using approximately the same bitrate.
   **/
  AudioEncoding_OggOpus = 3,
};

GPBEnumDescriptor *AudioEncoding_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AudioEncoding_IsValidValue(int32_t value);

#pragma mark - CloudTtsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface CloudTtsRoot : GPBRootObject
@end

#pragma mark - ListVoicesRequest

typedef GPB_ENUM(ListVoicesRequest_FieldNumber) {
  ListVoicesRequest_FieldNumber_LanguageCode = 1,
};

/**
 * The top-level message sent by the client for the `ListVoices` method.
 **/
GPB_FINAL @interface ListVoicesRequest : GPBMessage

/**
 * Optional (but recommended)
 * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. If
 * specified, the ListVoices call will only return voices that can be used to
 * synthesize this language_code. E.g. when specifying "en-NZ", you will get
 * supported "en-*" voices; when specifying "no", you will get supported
 * "no-*" (Norwegian) and "nb-*" (Norwegian Bokmal) voices; specifying "zh"
 * will also get supported "cmn-*" voices; specifying "zh-hk" will also get
 * supported "yue-*" voices.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

@end

#pragma mark - ListVoicesResponse

typedef GPB_ENUM(ListVoicesResponse_FieldNumber) {
  ListVoicesResponse_FieldNumber_VoicesArray = 1,
};

/**
 * The message returned to the client by the `ListVoices` method.
 **/
GPB_FINAL @interface ListVoicesResponse : GPBMessage

/** The list of voices. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Voice*> *voicesArray;
/** The number of items in @c voicesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger voicesArray_Count;

@end

#pragma mark - Voice

typedef GPB_ENUM(Voice_FieldNumber) {
  Voice_FieldNumber_LanguageCodesArray = 1,
  Voice_FieldNumber_Name = 2,
  Voice_FieldNumber_SsmlGender = 3,
  Voice_FieldNumber_NaturalSampleRateHertz = 4,
};

/**
 * Description of a voice supported by the TTS service.
 **/
GPB_FINAL @interface Voice : GPBMessage

/**
 * The languages that this voice supports, expressed as
 * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g.
 * "en-US", "es-419", "cmn-tw").
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *languageCodesArray;
/** The number of items in @c languageCodesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger languageCodesArray_Count;

/** The name of this voice.  Each distinct voice has a unique name. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** The gender of this voice. */
@property(nonatomic, readwrite) SsmlVoiceGender ssmlGender;

/** The natural sample rate (in hertz) for this voice. */
@property(nonatomic, readwrite) int32_t naturalSampleRateHertz;

@end

/**
 * Fetches the raw value of a @c Voice's @c ssmlGender property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Voice_SsmlGender_RawValue(Voice *message);
/**
 * Sets the raw value of an @c Voice's @c ssmlGender property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVoice_SsmlGender_RawValue(Voice *message, int32_t value);

#pragma mark - SynthesizeSpeechRequest

typedef GPB_ENUM(SynthesizeSpeechRequest_FieldNumber) {
  SynthesizeSpeechRequest_FieldNumber_Input = 1,
  SynthesizeSpeechRequest_FieldNumber_Voice = 2,
  SynthesizeSpeechRequest_FieldNumber_AudioConfig = 3,
};

/**
 * The top-level message sent by the client for the `SynthesizeSpeech` method.
 **/
GPB_FINAL @interface SynthesizeSpeechRequest : GPBMessage

/** Required. The Synthesizer requires either plain text or SSML as input. */
@property(nonatomic, readwrite, strong, null_resettable) SynthesisInput *input;
/** Test to see if @c input has been set. */
@property(nonatomic, readwrite) BOOL hasInput;

/** Required. The desired voice of the synthesized audio. */
@property(nonatomic, readwrite, strong, null_resettable) VoiceSelectionParams *voice;
/** Test to see if @c voice has been set. */
@property(nonatomic, readwrite) BOOL hasVoice;

/** Required. The configuration of the synthesized audio. */
@property(nonatomic, readwrite, strong, null_resettable) AudioConfig *audioConfig;
/** Test to see if @c audioConfig has been set. */
@property(nonatomic, readwrite) BOOL hasAudioConfig;

@end

#pragma mark - SynthesisInput

typedef GPB_ENUM(SynthesisInput_FieldNumber) {
  SynthesisInput_FieldNumber_Text = 1,
  SynthesisInput_FieldNumber_Ssml = 2,
};

typedef GPB_ENUM(SynthesisInput_InputSource_OneOfCase) {
  SynthesisInput_InputSource_OneOfCase_GPBUnsetOneOfCase = 0,
  SynthesisInput_InputSource_OneOfCase_Text = 1,
  SynthesisInput_InputSource_OneOfCase_Ssml = 2,
};

/**
 * Contains text input to be synthesized. Either `text` or `ssml` must be
 * supplied. Supplying both or neither returns
 * [google.rpc.Code.INVALID_ARGUMENT][]. The input size is limited to 5000
 * characters.
 **/
GPB_FINAL @interface SynthesisInput : GPBMessage

/** The input source, which is either plain text or SSML. */
@property(nonatomic, readonly) SynthesisInput_InputSource_OneOfCase inputSourceOneOfCase;

/** The raw text to be synthesized. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

/**
 * The SSML document to be synthesized. The SSML document must be valid
 * and well-formed. Otherwise the RPC will fail and return
 * [google.rpc.Code.INVALID_ARGUMENT][]. For more information, see
 * [SSML](/speech/text-to-speech/docs/ssml).
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *ssml;

@end

/**
 * Clears whatever value was set for the oneof 'inputSource'.
 **/
void SynthesisInput_ClearInputSourceOneOfCase(SynthesisInput *message);

#pragma mark - VoiceSelectionParams

typedef GPB_ENUM(VoiceSelectionParams_FieldNumber) {
  VoiceSelectionParams_FieldNumber_LanguageCode = 1,
  VoiceSelectionParams_FieldNumber_Name = 2,
  VoiceSelectionParams_FieldNumber_SsmlGender = 3,
};

/**
 * Description of which voice to use for a synthesis request.
 **/
GPB_FINAL @interface VoiceSelectionParams : GPBMessage

/**
 * The language (and optionally also the region) of the voice expressed as a
 * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g.
 * "en-US". Required. This should not include a script tag (e.g. use
 * "cmn-cn" rather than "cmn-Hant-cn"), because the script will be inferred
 * from the input provided in the SynthesisInput.  The TTS service
 * will use this parameter to help choose an appropriate voice.  Note that
 * the TTS service may choose a voice with a slightly different language code
 * than the one selected; it may substitute a different region
 * (e.g. using en-US rather than en-CA if there isn't a Canadian voice
 * available), or even a different language, e.g. using "nb" (Norwegian
 * Bokmal) instead of "no" (Norwegian)".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

/**
 * The name of the voice. Optional; if not set, the service will choose a
 * voice based on the other parameters such as language_code and gender.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * The preferred gender of the voice. Optional; if not set, the service will
 * choose a voice based on the other parameters such as language_code and
 * name. Note that this is only a preference, not requirement; if a
 * voice of the appropriate gender is not available, the synthesizer should
 * substitute a voice with a different gender rather than failing the request.
 **/
@property(nonatomic, readwrite) SsmlVoiceGender ssmlGender;

@end

/**
 * Fetches the raw value of a @c VoiceSelectionParams's @c ssmlGender property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t VoiceSelectionParams_SsmlGender_RawValue(VoiceSelectionParams *message);
/**
 * Sets the raw value of an @c VoiceSelectionParams's @c ssmlGender property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVoiceSelectionParams_SsmlGender_RawValue(VoiceSelectionParams *message, int32_t value);

#pragma mark - AudioConfig

typedef GPB_ENUM(AudioConfig_FieldNumber) {
  AudioConfig_FieldNumber_AudioEncoding = 1,
  AudioConfig_FieldNumber_SpeakingRate = 2,
  AudioConfig_FieldNumber_Pitch = 3,
  AudioConfig_FieldNumber_VolumeGainDb = 4,
  AudioConfig_FieldNumber_SampleRateHertz = 5,
  AudioConfig_FieldNumber_EffectsProfileIdArray = 6,
};

/**
 * Description of audio data to be synthesized.
 **/
GPB_FINAL @interface AudioConfig : GPBMessage

/** Required. The format of the requested audio byte stream. */
@property(nonatomic, readwrite) AudioEncoding audioEncoding;

/**
 * Optional speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal
 * native speed supported by the specific voice. 2.0 is twice as fast, and
 * 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any
 * other values < 0.25 or > 4.0 will return an error.
 **/
@property(nonatomic, readwrite) double speakingRate;

/**
 * Optional speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20
 * semitones from the original pitch. -20 means decrease 20 semitones from the
 * original pitch.
 **/
@property(nonatomic, readwrite) double pitch;

/**
 * Optional volume gain (in dB) of the normal native volume supported by the
 * specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of
 * 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB)
 * will play at approximately half the amplitude of the normal native signal
 * amplitude. A value of +6.0 (dB) will play at approximately twice the
 * amplitude of the normal native signal amplitude. Strongly recommend not to
 * exceed +10 (dB) as there's usually no effective increase in loudness for
 * any value greater than that.
 **/
@property(nonatomic, readwrite) double volumeGainDb;

/**
 * The synthesis sample rate (in hertz) for this audio. Optional.  If this is
 * different from the voice's natural sample rate, then the synthesizer will
 * honor this request by converting to the desired sample rate (which might
 * result in worse audio quality), unless the specified sample rate is not
 * supported for the encoding chosen, in which case it will fail the request
 * and return [google.rpc.Code.INVALID_ARGUMENT][].
 **/
@property(nonatomic, readwrite) int32_t sampleRateHertz;

/**
 * An identifier which selects 'audio effects' profiles that are applied on
 * (post synthesized) text to speech.
 * Effects are applied on top of each other in the order they are given.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *effectsProfileIdArray;
/** The number of items in @c effectsProfileIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger effectsProfileIdArray_Count;

@end

/**
 * Fetches the raw value of a @c AudioConfig's @c audioEncoding property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t AudioConfig_AudioEncoding_RawValue(AudioConfig *message);
/**
 * Sets the raw value of an @c AudioConfig's @c audioEncoding property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetAudioConfig_AudioEncoding_RawValue(AudioConfig *message, int32_t value);

#pragma mark - SynthesizeSpeechResponse

typedef GPB_ENUM(SynthesizeSpeechResponse_FieldNumber) {
  SynthesizeSpeechResponse_FieldNumber_AudioContent = 1,
};

/**
 * The message returned to the client by the `SynthesizeSpeech` method.
 **/
GPB_FINAL @interface SynthesizeSpeechResponse : GPBMessage

/**
 * The audio data bytes encoded as specified in the request, including the
 * header (For LINEAR16 audio, we include the WAV header). Note: as
 * with all bytes fields, protobuffers use a pure binary representation,
 * whereas JSON representations use base64.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioContent;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
